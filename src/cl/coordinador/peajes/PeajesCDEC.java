/*
 * Copyright 2019 Coordinador Electrico Nacional
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package cl.coordinador.peajes;

import static cl.coordinador.peajes.PeajesConstant.SLASH;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import java.sql.Time;
import java.util.HashMap;
import java.util.Properties;
import javax.swing.JTextArea;

/**
 * Created on 19-mar-2010, 13:40:42
 *
 * @author aramos
 */
public class PeajesCDEC extends javax.swing.JFrame {
    
    private File nombreDirLiq;
    private File nombreDirReliq;
    private boolean LiquidacionReliquidacion;
    private long tInicio;
    private Time tiempo=new Time(0);
    private Timer timer;
    private Properties propiedades; //Configuraciones del caso TODO: rename
    private static Properties config; //Configuraciones de la herramienta TODO: rename
    private static final String ARCHIVO_CONFIG = "config.xml"; //Nombre archivo unico de configuracion de la herramienta
    private PrintStream standardOut;
    private PrintStream standardErr;
    private PrintStream customPrintStream;
    private boolean bShowMensajes = false;
    private boolean bUsePlexosAPI = false;

    /** Creates new form NewJFrame1 */
    public PeajesCDEC() {
        initComponents();
        reLoadOptions();
        timer = new Timer(1000, new TimerListener());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnHorizonteLiquida = new javax.swing.ButtonGroup();
        dialogPrintMensajes = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaPrintMensajes = new javax.swing.JTextArea();
        btnClearTxtAreaPrintMensajes = new javax.swing.JButton();
        textoCalculo = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cuadroAnoAEvaluar = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        campoDirectorioEntrada = new javax.swing.JTextField();
        campoDirectorioSalida = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        botonDirectorioEntrada = new javax.swing.JButton();
        botonDirectorioSalida = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        cuadroSeleccionAgnoBase = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        cuadroAnoBase = new javax.swing.JComboBox();
        cuadroSeleccionTipoCalculo = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        progreso = new javax.swing.JProgressBar();
        jLabel9 = new javax.swing.JLabel();
        etiquetaTiempo = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        btnLiquidaAnual = new javax.swing.JRadioButton();
        btnLiquidaMensual = new javax.swing.JRadioButton();
        jPanel7 = new javax.swing.JPanel();
        btnCalcularProrrAnual = new javax.swing.JButton();
        btnPagoRetAnual = new javax.swing.JButton();
        btnCuadroAnual = new javax.swing.JButton();
        btnPagoInyAnual = new javax.swing.JButton();
        lblMesLiquida = new javax.swing.JLabel();
        Mes = new javax.swing.JComboBox();
        lblFechaPago = new javax.swing.JLabel();
        txtFechaPago = new javax.swing.JTextField();
        btnCalcularPeaje = new javax.swing.JButton();
        ActClientes = new javax.swing.JCheckBox();
        btnCalcularTodo = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jSplitPane4 = new javax.swing.JSplitPane();
        jLabel8 = new javax.swing.JLabel();
        cuadroSeleccionSlack = new javax.swing.JTextField();
        jSplitPane1 = new javax.swing.JSplitPane();
        jLabel5 = new javax.swing.JLabel();
        cuadroSeleccionHidro = new javax.swing.JComboBox();
        jSplitPane2 = new javax.swing.JSplitPane();
        jLabel6 = new javax.swing.JLabel();
        cuadroSeleccionNEtapas = new javax.swing.JTextField();
        jSplitPane3 = new javax.swing.JSplitPane();
        jLabel7 = new javax.swing.JLabel();
        cuadroSeleccionOffset = new javax.swing.JTextField();
        pnlReliquidacion = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        DirectorioLiquidacion = new javax.swing.JTextField();
        DirectorioReliquidacion = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        botonDirectorioLiq = new javax.swing.JButton();
        Directorio = new javax.swing.JButton();
        botonCalcularReliq = new javax.swing.JButton();
        Mes1 = new javax.swing.JComboBox();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        FecPago = new javax.swing.JTextField();
        botonEscReliq = new javax.swing.JButton();
        chkboxUsarRangoDeAnos = new javax.swing.JCheckBox();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        cuadroAnoFinalRangoAEvaluar = new javax.swing.JComboBox();
        cuadroAnoInicialRangoAEvaluar = new javax.swing.JComboBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        menuOpciones = new javax.swing.JMenuItem();

        dialogPrintMensajes.setTitle("Info");

        txtAreaPrintMensajes.setColumns(20);
        txtAreaPrintMensajes.setRows(5);
        jScrollPane1.setViewportView(txtAreaPrintMensajes);

        btnClearTxtAreaPrintMensajes.setText("Clear");
        btnClearTxtAreaPrintMensajes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearTxtAreaPrintMensajesActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout dialogPrintMensajesLayout = new org.jdesktop.layout.GroupLayout(dialogPrintMensajes.getContentPane());
        dialogPrintMensajes.getContentPane().setLayout(dialogPrintMensajesLayout);
        dialogPrintMensajesLayout.setHorizontalGroup(
            dialogPrintMensajesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(dialogPrintMensajesLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, dialogPrintMensajesLayout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(btnClearTxtAreaPrintMensajes)
                .add(156, 156, 156))
        );
        dialogPrintMensajesLayout.setVerticalGroup(
            dialogPrintMensajesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(dialogPrintMensajesLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 281, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(btnClearTxtAreaPrintMensajes)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        textoCalculo.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        textoCalculo.setForeground(java.awt.Color.blue);
        textoCalculo.setText("Departamento de Peajes");
        textoCalculo.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        textoCalculo.setMaximumSize(new java.awt.Dimension(530, 30));
        textoCalculo.setMinimumSize(new java.awt.Dimension(530, 30));
        textoCalculo.setPreferredSize(new java.awt.Dimension(530, 30));

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cl/coordinador/peajes/resources/logo3.png"))); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setMaximumSize(new java.awt.Dimension(530, 44));
        jPanel1.setMinimumSize(new java.awt.Dimension(530, 44));
        jPanel1.setPreferredSize(new java.awt.Dimension(530, 44));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel1.setText("Año a evaluar:");

        cuadroAnoAEvaluar.setEditable(true);
        cuadroAnoAEvaluar.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        cuadroAnoAEvaluar.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030", "2031" }));
        cuadroAnoAEvaluar.setMaximumSize(new java.awt.Dimension(70, 19));
        cuadroAnoAEvaluar.setMinimumSize(new java.awt.Dimension(70, 19));
        cuadroAnoAEvaluar.setPreferredSize(new java.awt.Dimension(70, 19));
        cuadroAnoAEvaluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cuadroAnoAEvaluarAccion(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .add(27, 27, 27)
                .add(cuadroAnoAEvaluar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(cuadroAnoAEvaluar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.setMaximumSize(new java.awt.Dimension(530, 138));
        jPanel2.setMinimumSize(new java.awt.Dimension(530, 138));
        jPanel2.setPreferredSize(new java.awt.Dimension(530, 138));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel2.setText("Directorios");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel10.setText("Archivos de Entrada");

        campoDirectorioEntrada.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        campoDirectorioEntrada.setMaximumSize(new java.awt.Dimension(386, 18));
        campoDirectorioEntrada.setMinimumSize(new java.awt.Dimension(386, 18));
        campoDirectorioEntrada.setPreferredSize(new java.awt.Dimension(386, 18));

        campoDirectorioSalida.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        campoDirectorioSalida.setMaximumSize(new java.awt.Dimension(386, 18));
        campoDirectorioSalida.setMinimumSize(new java.awt.Dimension(386, 18));
        campoDirectorioSalida.setPreferredSize(new java.awt.Dimension(386, 18));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel3.setText("Archivos de Salida");

        botonDirectorioEntrada.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        botonDirectorioEntrada.setText("Explorar");
        botonDirectorioEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirDirectorioEnt(evt);
            }
        });

        botonDirectorioSalida.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        botonDirectorioSalida.setText("Explorar");
        botonDirectorioSalida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirDirectorioSal(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel10)
                            .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 114, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel2))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(31, 31, 31)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(campoDirectorioEntrada, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)
                            .add(campoDirectorioSalida, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(botonDirectorioSalida)
                            .add(botonDirectorioEntrada))))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel10)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(campoDirectorioEntrada, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(botonDirectorioEntrada))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(campoDirectorioSalida, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(botonDirectorioSalida))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel3.setMaximumSize(new java.awt.Dimension(530, 44));
        jPanel3.setMinimumSize(new java.awt.Dimension(530, 44));
        jPanel3.setPreferredSize(new java.awt.Dimension(530, 44));

        cuadroSeleccionAgnoBase.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        cuadroSeleccionAgnoBase.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Año a Evaluar = Año Base", "Año a Evaluar != Año Base" }));
        cuadroSeleccionAgnoBase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cuadroSeleccionAgnoBaseAccion(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel4.setText("Año base:");

        cuadroAnoBase.setEditable(true);
        cuadroAnoBase.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        cuadroAnoBase.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2014", "2015", "2016", "2017", "2018", "2019", "2020" }));
        cuadroAnoBase.setEnabled(false);
        cuadroAnoBase.setMaximumSize(new java.awt.Dimension(70, 19));
        cuadroAnoBase.setMinimumSize(new java.awt.Dimension(70, 19));
        cuadroAnoBase.setPreferredSize(new java.awt.Dimension(70, 19));

        cuadroSeleccionTipoCalculo.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        cuadroSeleccionTipoCalculo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cálculo de Liquidación", "Cálculo de Reliquidación" }));
        cuadroSeleccionTipoCalculo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cuadroSeleccionTipoCalculoAccion(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(12, 12, 12)
                .add(cuadroSeleccionAgnoBase, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(48, 48, 48)
                .add(cuadroSeleccionTipoCalculo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(32, 32, 32)
                .add(jLabel4)
                .add(18, 18, 18)
                .add(cuadroAnoBase, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(48, 48, 48))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cuadroSeleccionAgnoBase, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cuadroAnoBase, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cuadroSeleccionTipoCalculo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel4.setMaximumSize(null);
        jPanel4.setName(""); // NOI18N
        jPanel4.setPreferredSize(new java.awt.Dimension(530, 180));

        progreso.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        progreso.setPreferredSize(new java.awt.Dimension(430, 15));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel9.setText("Tiempo de ejecución:");

        etiquetaTiempo.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        etiquetaTiempo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        etiquetaTiempo.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        etiquetaTiempo.setPreferredSize(new java.awt.Dimension(100, 15));

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel21.setText("Liquidación:");

        btnHorizonteLiquida.add(btnLiquidaAnual);
        btnLiquidaAnual.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        btnLiquidaAnual.setSelected(true);
        btnLiquidaAnual.setText("Anual");
        btnLiquidaAnual.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                btnLiquidaAnualItemStateChanged(evt);
            }
        });

        btnHorizonteLiquida.add(btnLiquidaMensual);
        btnLiquidaMensual.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        btnLiquidaMensual.setText("Mensual");
        btnLiquidaMensual.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                btnLiquidaMensualItemStateChanged(evt);
            }
        });

        btnCalcularProrrAnual.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        btnCalcularProrrAnual.setText("Calcular Prorratas");
        btnCalcularProrrAnual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcular(evt);
            }
        });

        btnPagoRetAnual.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        btnPagoRetAnual.setText("Pagos  Retiro");
        btnPagoRetAnual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPagoRetAnualActionPerformed(evt);
            }
        });

        btnCuadroAnual.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        btnCuadroAnual.setText("Esc. Cuadro Resumen");
        btnCuadroAnual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCuadroAnualActionPerformed(evt);
            }
        });

        btnPagoInyAnual.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        btnPagoInyAnual.setText(" Pagos Generación");
        btnPagoInyAnual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPagoInyAnualActionPerformed(evt);
            }
        });

        lblMesLiquida.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lblMesLiquida.setText("Mes a liquidar");
        lblMesLiquida.setEnabled(false);

        Mes.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        Mes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic" }));
        Mes.setEnabled(false);

        lblFechaPago.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lblFechaPago.setText("Fecha Pago");
        lblFechaPago.setEnabled(false);

        txtFechaPago.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        txtFechaPago.setText(" dd/mm/aaaa");
        txtFechaPago.setEnabled(false);

        btnCalcularPeaje.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        btnCalcularPeaje.setText("Calcular Peajes");
        btnCalcularPeaje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcularPeajecalcular(evt);
            }
        });

        ActClientes.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        ActClientes.setText("Actualizar Clientes");

        btnCalcularTodo.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        btnCalcularTodo.setText("Calcular Todo");
        btnCalcularTodo.setMaximumSize(new java.awt.Dimension(94, 17));
        btnCalcularTodo.setMinimumSize(new java.awt.Dimension(94, 17));
        btnCalcularTodo.setPreferredSize(new java.awt.Dimension(94, 17));
        btnCalcularTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcularTodoActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel7Layout = new org.jdesktop.layout.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .add(28, 28, 28)
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel7Layout.createSequentialGroup()
                        .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                .add(jPanel7Layout.createSequentialGroup()
                                    .add(lblMesLiquida)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                    .add(Mes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 63, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(jPanel7Layout.createSequentialGroup()
                                    .add(lblFechaPago)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                    .add(txtFechaPago)))
                            .add(ActClientes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 131, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(100, 100, 100)
                        .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jPanel7Layout.createSequentialGroup()
                                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(btnPagoInyAnual, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                                    .add(btnCalcularProrrAnual, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(btnCuadroAnual, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 127, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                .add(btnCalcularPeaje, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                                .add(btnPagoRetAnual, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .add(30, 30, 30))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel7Layout.createSequentialGroup()
                        .add(btnCalcularTodo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 127, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(107, 107, 107))))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel7Layout.createSequentialGroup()
                        .add(11, 11, 11)
                        .add(btnCalcularPeaje))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(ActClientes)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel7Layout.createSequentialGroup()
                        .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(btnCalcularProrrAnual)
                            .add(btnPagoRetAnual))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(btnCuadroAnual)
                            .add(btnPagoInyAnual)))
                    .add(jPanel7Layout.createSequentialGroup()
                        .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(lblMesLiquida)
                            .add(Mes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(lblFechaPago)
                            .add(txtFechaPago, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(btnCalcularTodo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jLabel21)
                        .add(33, 33, 33)
                        .add(btnLiquidaAnual)
                        .add(5, 5, 5)
                        .add(btnLiquidaMensual))
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jLabel9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 130, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(progreso, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 230, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(12, 12, 12)
                        .add(etiquetaTiempo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 128, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(0, 0, 0)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel21)
                    .add(btnLiquidaAnual)
                    .add(btnLiquidaMensual))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel9)
                    .add(progreso, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(etiquetaTiempo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(8, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel5.setMaximumSize(new java.awt.Dimension(530, 76));
        jPanel5.setMinimumSize(new java.awt.Dimension(530, 76));
        jPanel5.setPreferredSize(new java.awt.Dimension(530, 76));

        jSplitPane4.setDividerLocation(170);
        jSplitPane4.setPreferredSize(new java.awt.Dimension(250, 22));

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel8.setText("Nº Barra Referencia");
        jLabel8.setMaximumSize(new java.awt.Dimension(65, 8));
        jLabel8.setMinimumSize(new java.awt.Dimension(65, 8));
        jLabel8.setPreferredSize(new java.awt.Dimension(65, 8));
        jSplitPane4.setLeftComponent(jLabel8);

        cuadroSeleccionSlack.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        cuadroSeleccionSlack.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        cuadroSeleccionSlack.setText("173");
        jSplitPane4.setRightComponent(cuadroSeleccionSlack);

        jSplitPane1.setDividerLocation(170);
        jSplitPane1.setMaximumSize(new java.awt.Dimension(65, 8));
        jSplitPane1.setMinimumSize(new java.awt.Dimension(65, 8));
        jSplitPane1.setPreferredSize(new java.awt.Dimension(250, 22));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel5.setText("Nº Hidrologías");
        jLabel5.setMaximumSize(new java.awt.Dimension(65, 8));
        jLabel5.setMinimumSize(new java.awt.Dimension(65, 8));
        jLabel5.setPreferredSize(new java.awt.Dimension(65, 8));
        jSplitPane1.setLeftComponent(jLabel5);

        cuadroSeleccionHidro.setEditable(true);
        cuadroSeleccionHidro.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        cuadroSeleccionHidro.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "60" }));
        cuadroSeleccionHidro.setMaximumSize(new java.awt.Dimension(65, 8));
        cuadroSeleccionHidro.setMinimumSize(new java.awt.Dimension(65, 8));
        cuadroSeleccionHidro.setPreferredSize(new java.awt.Dimension(65, 8));
        jSplitPane1.setRightComponent(cuadroSeleccionHidro);

        jSplitPane2.setDividerLocation(170);
        jSplitPane2.setPreferredSize(new java.awt.Dimension(250, 22));

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel6.setText("Nº Etapas/Año");
        jLabel6.setMaximumSize(new java.awt.Dimension(65, 8));
        jLabel6.setMinimumSize(new java.awt.Dimension(65, 8));
        jLabel6.setPreferredSize(new java.awt.Dimension(65, 8));
        jSplitPane2.setLeftComponent(jLabel6);

        cuadroSeleccionNEtapas.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        cuadroSeleccionNEtapas.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        cuadroSeleccionNEtapas.setText("240");
        jSplitPane2.setRightComponent(cuadroSeleccionNEtapas);

        jSplitPane3.setDividerLocation(170);
        jSplitPane3.setPreferredSize(new java.awt.Dimension(250, 22));

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel7.setText("Offset Etapas");
        jLabel7.setMaximumSize(new java.awt.Dimension(65, 8));
        jLabel7.setMinimumSize(new java.awt.Dimension(65, 8));
        jLabel7.setPreferredSize(new java.awt.Dimension(65, 8));
        jSplitPane3.setLeftComponent(jLabel7);

        cuadroSeleccionOffset.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        cuadroSeleccionOffset.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        cuadroSeleccionOffset.setText("15");
        jSplitPane3.setRightComponent(cuadroSeleccionOffset);

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(jSplitPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jSplitPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(jSplitPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jSplitPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jSplitPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jSplitPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jSplitPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jSplitPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        pnlReliquidacion.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        pnlReliquidacion.setMaximumSize(new java.awt.Dimension(530, 138));
        pnlReliquidacion.setMinimumSize(new java.awt.Dimension(530, 138));
        pnlReliquidacion.setPreferredSize(new java.awt.Dimension(600, 137));

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel14.setText("Reliquidación por IT");

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel15.setText("Directorio de Archivo LiquidaciónMes.xls");

        DirectorioLiquidacion.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        DirectorioLiquidacion.setMaximumSize(new java.awt.Dimension(386, 18));
        DirectorioLiquidacion.setMinimumSize(new java.awt.Dimension(386, 18));
        DirectorioLiquidacion.setPreferredSize(new java.awt.Dimension(386, 18));

        DirectorioReliquidacion.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        DirectorioReliquidacion.setMaximumSize(new java.awt.Dimension(386, 18));
        DirectorioReliquidacion.setMinimumSize(new java.awt.Dimension(386, 18));
        DirectorioReliquidacion.setPreferredSize(new java.awt.Dimension(386, 18));

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel16.setText("Directorio Reliquidación");

        botonDirectorioLiq.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        botonDirectorioLiq.setText("Explorar");
        botonDirectorioLiq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonDirectorioLiqabrirDirectorioEnt(evt);
            }
        });

        Directorio.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        Directorio.setText("Explorar");
        Directorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DirectorioabrirDirectorioSal(evt);
            }
        });

        botonCalcularReliq.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        botonCalcularReliq.setText("Calc. Reliquidación");
        botonCalcularReliq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCalcularReliqcalcular(evt);
            }
        });

        Mes1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        Mes1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic" }));

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel17.setText("Mes a Reliiquidar");

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel18.setText("Fecha Pago");

        FecPago.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        FecPago.setText(" dd/mm/aaaa");

        botonEscReliq.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        botonEscReliq.setText("Escribir Archivos");
        botonEscReliq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEscReliqcalcular(evt);
            }
        });

        org.jdesktop.layout.GroupLayout pnlReliquidacionLayout = new org.jdesktop.layout.GroupLayout(pnlReliquidacion);
        pnlReliquidacion.setLayout(pnlReliquidacionLayout);
        pnlReliquidacionLayout.setHorizontalGroup(
            pnlReliquidacionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlReliquidacionLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlReliquidacionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlReliquidacionLayout.createSequentialGroup()
                        .add(jLabel14)
                        .add(18, 18, 18)
                        .add(jLabel17)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(Mes1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(jLabel18)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(FecPago, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 72, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(pnlReliquidacionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, pnlReliquidacionLayout.createSequentialGroup()
                            .add(pnlReliquidacionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(jLabel15)
                                .add(jLabel16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 114, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(323, 323, 323))
                        .add(pnlReliquidacionLayout.createSequentialGroup()
                            .add(21, 21, 21)
                            .add(pnlReliquidacionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(pnlReliquidacionLayout.createSequentialGroup()
                                    .add(botonCalcularReliq)
                                    .add(28, 28, 28)
                                    .add(botonEscReliq))
                                .add(pnlReliquidacionLayout.createSequentialGroup()
                                    .add(pnlReliquidacionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                        .add(DirectorioLiquidacion, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)
                                        .add(DirectorioReliquidacion, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                    .add(pnlReliquidacionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(botonDirectorioLiq)
                                        .add(Directorio)))))))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlReliquidacionLayout.setVerticalGroup(
            pnlReliquidacionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlReliquidacionLayout.createSequentialGroup()
                .add(6, 6, 6)
                .add(pnlReliquidacionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel14)
                    .add(jLabel17)
                    .add(Mes1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel18)
                    .add(FecPago, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel15)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlReliquidacionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(DirectorioLiquidacion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(botonDirectorioLiq))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel16)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlReliquidacionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(DirectorioReliquidacion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(Directorio))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlReliquidacionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(botonEscReliq)
                    .add(botonCalcularReliq))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        chkboxUsarRangoDeAnos.setText("Usar rango de años");

        jLabel12.setText("Año Inicial");

        jLabel13.setText("Año Final");

        cuadroAnoFinalRangoAEvaluar.setEditable(true);
        cuadroAnoFinalRangoAEvaluar.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        cuadroAnoFinalRangoAEvaluar.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030", "2031", "2032", "2033", "2034", "2035", "2036", "2037", "2038", "2039", "2040" }));
        cuadroAnoFinalRangoAEvaluar.setMaximumSize(new java.awt.Dimension(70, 19));
        cuadroAnoFinalRangoAEvaluar.setMinimumSize(new java.awt.Dimension(70, 19));
        cuadroAnoFinalRangoAEvaluar.setPreferredSize(new java.awt.Dimension(70, 19));
        cuadroAnoFinalRangoAEvaluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cuadroAnoFinalRangoAEvaluarAccion(evt);
            }
        });

        cuadroAnoInicialRangoAEvaluar.setEditable(true);
        cuadroAnoInicialRangoAEvaluar.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        cuadroAnoInicialRangoAEvaluar.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030", "2031", "2032", "2033", "2034", "2035", "2036", "2037", "2038", "2039", "2040" }));
        cuadroAnoInicialRangoAEvaluar.setMaximumSize(new java.awt.Dimension(70, 19));
        cuadroAnoInicialRangoAEvaluar.setMinimumSize(new java.awt.Dimension(70, 19));
        cuadroAnoInicialRangoAEvaluar.setPreferredSize(new java.awt.Dimension(70, 19));
        cuadroAnoInicialRangoAEvaluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cuadroAnoInicialRangoAEvaluarAccion(evt);
            }
        });

        jMenu1.setText("File");
        jMenu1.setFont(jMenu1.getFont().deriveFont(jMenu1.getFont().getSize()-2f));

        jMenuItem1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jMenuItem1.setText("Carga Opciones Caso");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jMenuItem2.setText("Guarda Opciones Caso");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        menuOpciones.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        menuOpciones.setText("Configuración");
        menuOpciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuOpcionesActionPerformed(evt);
            }
        });
        jMenu1.add(menuOpciones);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE)
                    .add(jPanel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE)
                    .add(pnlReliquidacion, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE)
                    .add(textoCalculo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(jLabel11)
                                .add(54, 54, 54))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(chkboxUsarRangoDeAnos)
                                .add(28, 28, 28)))
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 194, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createSequentialGroup()
                                .add(jLabel12)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(cuadroAnoInicialRangoAEvaluar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(35, 35, 35)
                                .add(jLabel13)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(cuadroAnoFinalRangoAEvaluar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .add(0, 0, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel11)
                    .add(layout.createSequentialGroup()
                        .add(24, 24, 24)
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cuadroAnoInicialRangoAEvaluar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel12)
                    .add(jLabel13)
                    .add(cuadroAnoFinalRangoAEvaluar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(chkboxUsarRangoDeAnos))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 134, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 47, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 165, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlReliquidacion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 157, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(textoCalculo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void calcular(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcular
//        calcular();
        calcularProrratas();
}//GEN-LAST:event_calcular

    private void abrirDirectorioEnt(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirDirectorioEnt
        abrirDirectorioEntAccion();
}//GEN-LAST:event_abrirDirectorioEnt

    private void abrirDirectorioSal(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirDirectorioSal
        abrirDirectorioSalAccion();
}//GEN-LAST:event_abrirDirectorioSal

    private void cuadroAnoAEvaluarAccion(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cuadroAnoAEvaluarAccion
//        seleccionaNumHid();
    }//GEN-LAST:event_cuadroAnoAEvaluarAccion

    private void cuadroSeleccionAgnoBaseAccion(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cuadroSeleccionAgnoBaseAccion
        habilitarAnoABase();
    }//GEN-LAST:event_cuadroSeleccionAgnoBaseAccion

    private void btnPagoInyAnualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPagoInyAnualActionPerformed
        calcularPeajesIny();
    }//GEN-LAST:event_btnPagoInyAnualActionPerformed

    private void btnPagoRetAnualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPagoRetAnualActionPerformed
        calcularPeajesRet();
    }//GEN-LAST:event_btnPagoRetAnualActionPerformed

    private void btnCalcularPeajecalcular(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcularPeajecalcular
        
        if(bShowMensajes){
            this.dialogPrintMensajes.setSize(this.dialogPrintMensajes.getPreferredSize());
            this.dialogPrintMensajes.setVisible(true);
            this.setCustomPrint();
        }
        //Calcula un rango de años
        if(this.chkboxUsarRangoDeAnos.isSelected()){
            int anoInicial = Integer.parseInt(this.cuadroAnoInicialRangoAEvaluar.getSelectedItem().toString());
            int anoFinal = Integer.parseInt(this.cuadroAnoFinalRangoAEvaluar.getSelectedItem().toString());
            File f_DirectorioEntrada = new File(getSelectedDirectorioEntrada());
            File f_DirectorioSalida = new File(getSelectedDirectorioSalida());
            for (int year = anoInicial; year <= anoFinal; year++) {
                if (continueToPeajes(year)) {
                    Peajes.calculaPeajes(f_DirectorioEntrada, f_DirectorioSalida, year);
                }
            }
        }
        //Calcula un solo año
        else{
            calcularPeajes();
        }
    }//GEN-LAST:event_btnCalcularPeajecalcular

    private void btnCuadroAnualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCuadroAnualActionPerformed
//        EscribeLiquiAno();
        escribeCuadroResumen();
    }//GEN-LAST:event_btnCuadroAnualActionPerformed

    private void botonDirectorioLiqabrirDirectorioEnt(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDirectorioLiqabrirDirectorioEnt
        abrirDirectorioEntAccionRel();
    }//GEN-LAST:event_botonDirectorioLiqabrirDirectorioEnt

    private void DirectorioabrirDirectorioSal(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DirectorioabrirDirectorioSal
        abrirDirectorioSalAccionRel();
    }//GEN-LAST:event_DirectorioabrirDirectorioSal

    private void botonCalcularReliqcalcular(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCalcularReliqcalcular
        calcularReliquidacion();
    }//GEN-LAST:event_botonCalcularReliqcalcular

    private void botonEscReliqcalcular(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEscReliqcalcular
        EscReliquidacion();
    }//GEN-LAST:event_botonEscReliqcalcular

    private void cuadroSeleccionTipoCalculoAccion(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cuadroSeleccionTipoCalculoAccion
//        seleccionTipoLiquidacion();
    }//GEN-LAST:event_cuadroSeleccionTipoCalculoAccion

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        leePropiedades();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        EscribrePropiedades();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void menuOpcionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuOpcionesActionPerformed
        showOptionWindow();
    }//GEN-LAST:event_menuOpcionesActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        salirPeajes();
    }//GEN-LAST:event_formWindowClosing

    private void btnLiquidaMensualItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_btnLiquidaMensualItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            setActivaMes(true);
        } else if (evt.getStateChange() == ItemEvent.DESELECTED) {
            // Nothing
        }
    }//GEN-LAST:event_btnLiquidaMensualItemStateChanged

    private void btnLiquidaAnualItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_btnLiquidaAnualItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            setActivaMes(false);
        }  else if (evt.getStateChange() == ItemEvent.DESELECTED) {
            // Nothing
        }
    }//GEN-LAST:event_btnLiquidaAnualItemStateChanged

    private void cuadroAnoInicialRangoAEvaluarAccion(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cuadroAnoInicialRangoAEvaluarAccion
        // TODO add your handling code here:
    }//GEN-LAST:event_cuadroAnoInicialRangoAEvaluarAccion

    private void cuadroAnoFinalRangoAEvaluarAccion(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cuadroAnoFinalRangoAEvaluarAccion
        // TODO add your handling code here:
    }//GEN-LAST:event_cuadroAnoFinalRangoAEvaluarAccion

    private void btnClearTxtAreaPrintMensajesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearTxtAreaPrintMensajesActionPerformed
        // TODO add your handling code here:
        this.txtAreaPrintMensajes.setText(null);
    }//GEN-LAST:event_btnClearTxtAreaPrintMensajesActionPerformed

    private void btnCalcularTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcularTodoActionPerformed
        System.out.println("============= Iniciando calculo de peajes...=============");
        this.btnCalcularPeajecalcular(evt);
        calcularProrratas();
        while(!Prorratas.terminado()){
        }
        this.btnPagoRetAnualActionPerformed(evt);
        this.btnPagoInyAnualActionPerformed(evt);
        this.btnCuadroAnualActionPerformed(evt);
        System.out.println("============= Calculo de peajes terminado...=============");
    }//GEN-LAST:event_btnCalcularTodoActionPerformed

    public static void main(String args[]) {
               
        HashMap<String, Integer> argsMap= new HashMap<String, Integer>();
            
        if(args != null & args.length > 0){
            
            System.out.println("Uso: java -jar -Xmx5000m PeajesCDECSIC.jar");
            
            
            /* Inicio Codigo via CLI*/
            
            /*
            
            
            File entrada = null;               //carpeta entrada
            File salida = null;                //carpeta entrada
            int anoBase2 = 2004;               //a–o base
            int anoAEvaluar2 = anoBase2;           //a–o a evaluar
            int tipoCalcSeleccionado2 = 1;  // tipo de calculo
            int numHidro2 = 49;              //numero de hidrologias
            int numEtapasAno2 = 240;          //numero de etapas por a–o
            int numSlack2 = 14;              //barra slack
            int offset2 = 36 ;                //offset de etapas
            boolean clientes2 = false;          //actualiza clientes
            int calculo = 1;
            
            
            
            for(int i = 0; i < args.length; i++)
            argsMap.put(args[i], i);
                     
            if (argsMap.containsKey("-h")){
                System.out.println("Uso: java -jar -Xmx900m PeajesCDECSIC.jar [-parámetros]\n\n"
                        + "Parámetros obligatorios:\n"
                        + "-i path\t\t\tDirectorio de entrada.\n"
                        + "-o path\t\t\tDirectorio de salida.\n"
                        + "-hid hidrologías\tNúmero de hidrologías\n"
                        + "-calculo num\t\tOpción de cálculo:\n"
                        + "\t\t\t1: asdf\n"
                        + "\t\t\t2: asdf\n"
                        + "\t\t\t3: asdf\n"
                        + "\t\t\t4: asdf\n"
                        + "\t\t\t5: asdf\n"
                        + "Parámetros opcionales:\n"
                        + "-abase a–o\t\tAño basae.\n"
                        + "-aev a–o\t\tAño a evaluar.\n"
                        + "-etapas etapas\t\tNúmero de etapas por año (defecto 240).\n"
                        + "-slack barra\t\tBarra de referencia (defecto 14).\n"
                        + "-offset etapas\t\tOffset de Etapas (defecto 36).");
                System.exit(0);
            }
            
            try { //se intenta parsear los argumentos obligatorios
                 
                entrada  = new File(args[argsMap.get("-i")+1]);
                salida  = new File(args[argsMap.get("-o")+1]);
                numHidro2 = Integer.parseInt(args[argsMap.get("-hid")+1]);
                
                

            
            }
            catch (NullPointerException e) {
                System.err.println("Faltan argumentos, pruebe opción -h para ver ayuda");
                System.exit(1);
            }
                    
            catch (NumberFormatException e) {
                System.err.println("Argumento inválido, pruebe opción -h para ver ayuda");
                System.exit(1);    
            }
            
            
            try { //se intenta parsear los argumentos opcionales


                
                anoBase2  = Integer.parseInt(args[argsMap.get("-abase")+1]);
                anoAEvaluar2  =   Integer.parseInt(args[argsMap.get("-aev")+1]);      
                numEtapasAno2 =  Integer.parseInt(args[argsMap.get("-etapas")+1]);
                numSlack2 =  Integer.parseInt(args[argsMap.get("-slack")+1]);
                offset2 =  Integer.parseInt(args[argsMap.get("-offset")+1]);
                
                
            }
            catch (NullPointerException e) {
                System.out.println("Advertencia, se usa valores por defecto para las siguientes opciones:\n");
            }
            catch (NumberFormatException e) {
                System.err.println("Argumento inválido, pruebe opción -h para ver ayuda");
                System.exit(1);    
            }
            try { //se intenta parsear el calculo a realizar
                

                calculo = Integer.parseInt(args[argsMap.get("-calculo")+1]);
                
            
            }
            catch (NullPointerException e) {
                System.err.println("No se ha especificado una opción de cálculo, use opcion -h para ver ayuda");
                System.exit(1);
            }
            
            
            switch (calculo) {
                
            /*
             * Calculos:
             *      Peajes
             *      Prorratas
             *      Pagos Retiro
             *      Pagos de Generacion
             *      Cuadros anuales
             * 
             *      Liq Mensual Inyeccion
             *      Liq Mensual de Retiro
             *      Liquidacion Mes
             * 
             *      Calc Reliquidacion
             *      Escribir archivos Reliquidacion
             
             
             
             
             */    
            /*    
            //Prorratas.Comenzar(nombreDirEnt,nombreDirSal,anoAEvaluar,tipoCalcSeleccionado,anoBase,numHidro,numEtapasAno,numSlack,offset,clientes);
            case 1:    
                Prorratas.Comenzar(entrada,salida,anoAEvaluar2,tipoCalcSeleccionado2,anoBase2,numHidro2,numEtapasAno2,numSlack2,offset2,clientes2);
            case 2:
                System.out.println(""+anoAEvaluar2 + " " +tipoCalcSeleccionado2 + " " +anoBase2 + " " +numHidro2 + " " +numEtapasAno2 + " " +numSlack2 + " " +offset2);   
            case 3:
                System.out.println(""+anoAEvaluar2 + " " +tipoCalcSeleccionado2 + " " +anoBase2 + " " +numHidro2 + " " +numEtapasAno2 + " " +numSlack2 + " " +offset2); 
            case 4:
                System.out.println(""+anoAEvaluar2 + " " +tipoCalcSeleccionado2 + " " +anoBase2 + " " +numHidro2 + " " +numEtapasAno2 + " " +numSlack2 + " " +offset2); 
            case 5:
                System.out.println(""+anoAEvaluar2 + " " +tipoCalcSeleccionado2 + " " +anoBase2 + " " +numHidro2 + " " +numEtapasAno2 + " " +numSlack2 + " " +offset2); 
            }
            
            
            /* Fin Codigo via CLI*/
                
        }
            
            
        else{
                     
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new PeajesCDEC().setVisible(true);
                    }
            });
        }   
    }    
    
    
    
    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox ActClientes;
    private javax.swing.JButton Directorio;
    private javax.swing.JTextField DirectorioLiquidacion;
    private javax.swing.JTextField DirectorioReliquidacion;
    private javax.swing.JTextField FecPago;
    private javax.swing.JComboBox Mes;
    private javax.swing.JComboBox Mes1;
    private javax.swing.JButton botonCalcularReliq;
    private javax.swing.JButton botonDirectorioEntrada;
    private javax.swing.JButton botonDirectorioLiq;
    private javax.swing.JButton botonDirectorioSalida;
    private javax.swing.JButton botonEscReliq;
    private javax.swing.JButton btnCalcularPeaje;
    private javax.swing.JButton btnCalcularProrrAnual;
    private javax.swing.JButton btnCalcularTodo;
    private javax.swing.JButton btnClearTxtAreaPrintMensajes;
    private javax.swing.JButton btnCuadroAnual;
    private javax.swing.ButtonGroup btnHorizonteLiquida;
    private javax.swing.JRadioButton btnLiquidaAnual;
    private javax.swing.JRadioButton btnLiquidaMensual;
    private javax.swing.JButton btnPagoInyAnual;
    private javax.swing.JButton btnPagoRetAnual;
    private javax.swing.JTextField campoDirectorioEntrada;
    private javax.swing.JTextField campoDirectorioSalida;
    private javax.swing.JCheckBox chkboxUsarRangoDeAnos;
    private javax.swing.JComboBox cuadroAnoAEvaluar;
    private javax.swing.JComboBox cuadroAnoBase;
    private javax.swing.JComboBox cuadroAnoFinalRangoAEvaluar;
    private javax.swing.JComboBox cuadroAnoInicialRangoAEvaluar;
    private javax.swing.JComboBox cuadroSeleccionAgnoBase;
    private javax.swing.JComboBox cuadroSeleccionHidro;
    private javax.swing.JTextField cuadroSeleccionNEtapas;
    private javax.swing.JTextField cuadroSeleccionOffset;
    private javax.swing.JTextField cuadroSeleccionSlack;
    private javax.swing.JComboBox cuadroSeleccionTipoCalculo;
    private javax.swing.JDialog dialogPrintMensajes;
    private javax.swing.JLabel etiquetaTiempo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JSplitPane jSplitPane4;
    private javax.swing.JLabel lblFechaPago;
    private javax.swing.JLabel lblMesLiquida;
    private javax.swing.JMenuItem menuOpciones;
    private javax.swing.JPanel pnlReliquidacion;
    private javax.swing.JProgressBar progreso;
    private javax.swing.JLabel textoCalculo;
    private javax.swing.JTextArea txtAreaPrintMensajes;
    private javax.swing.JTextField txtFechaPago;
    // End of variables declaration//GEN-END:variables

    private void abrirDirectorioEntAccion() {
//        String nombreOs = System.getProperty("os.name");
//        System.out.println(nombreOs);
//        File directorio0;
        final JFileChooser selectorDirEnt = new JFileChooser(".");
//        if(nombreOs.equals("Windows XP")) {
//            directorio0 = selectorDirEnt.getCurrentDirectory().getParentFile().getParentFile();
//        }
//        else {
//            directorio0 = selectorDirEnt.getCurrentDirectory().getParentFile().getParentFile().getParentFile();
//        }
//        selectorDirEnt.setCurrentDirectory(directorio0);
//        selectorDirEnt.setCurrentDirectory(new File(selectorDirEnt.getCurrentDirectory()+File.separator+"DatosPeajes"+File.separator+cuadroAnoAEvaluar.getSelectedItem()));
//        File directorio = selectorDirEnt.getCurrentDirectory();
//        if(directorio0.equals(directorio)) {
//            JOptionPane.showMessageDialog(this,"Año a evaluar no ha sido creado.","Peajes Coordinador",JOptionPane.ERROR_MESSAGE);
//        }
        selectorDirEnt.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int resultado = selectorDirEnt.showOpenDialog(this);
        if(resultado==JFileChooser.CANCEL_OPTION) return;
//        nombreDirEnt = selectorDirEnt.getSelectedFile();
        campoDirectorioEntrada.setText(selectorDirEnt.getSelectedFile().getPath());
    }

    private void abrirDirectorioSalAccion() {
//        String nombreOs = System.getProperty("os.name");
//        File directorio0;
        final JFileChooser selectorDirSal = new JFileChooser(".");
//        if(nombreOs.equals("Windows XP")) {
//            directorio0 = selectorDirSal.getCurrentDirectory().getParentFile().getParentFile();
//        }
//        else {
//            directorio0 = selectorDirSal.getCurrentDirectory().getParentFile().getParentFile().getParentFile();
//        }
//        selectorDirSal.setCurrentDirectory(directorio0);
//        selectorDirSal.setCurrentDirectory(new File(selectorDirSal.getCurrentDirectory()+File.separator+"DatosPeajes"+File.separator+cuadroAnoAEvaluar.getSelectedItem()));
//        File directorio = selectorDirSal.getCurrentDirectory();
//        if(directorio0.equals(directorio)) {
//            JOptionPane.showMessageDialog(this,"Año a evaluar no ha sido creado.","Peajes Coordinador",JOptionPane.ERROR_MESSAGE);
//        }
        selectorDirSal.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int resultado = selectorDirSal.showOpenDialog(this);
        if(resultado==JFileChooser.CANCEL_OPTION) return;
//        nombreDirSal = selectorDirSal.getSelectedFile();
        campoDirectorioSalida.setText(selectorDirSal.getSelectedFile().getPath());
    }

//    private void seleccionaNumHid() {
//        anoAEvaluar = Integer.parseInt((String) cuadroAnoAEvaluar.getSelectedItem());
//        int nHydroMin = Integer.parseInt(cuadroSeleccionHidro.getItemAt(0).toString());
//        int nHydro = (anoAEvaluar-1962)-nHydroMin+1;
//        if (0 <= nHydro && nHydro < cuadroSeleccionHidro.getItemCount()) {
//            cuadroSeleccionHidro.setSelectedIndex(nHydro);
//        }
//    }
//
    private void habilitarAnoABase() {
        int nTipoCalcSeleccionado = (cuadroSeleccionAgnoBase.getSelectedItem().equals("Año a Evaluar = Año Base") ? 0 : 1);
        if (nTipoCalcSeleccionado == 0) {
            cuadroAnoBase.setEnabled(false);
        } else {
            cuadroAnoBase.setEnabled(true);
        }
    }
//    
//    private void seleccionTipoLiquidacion() {
//        LiquidacionReliquidacion=(cuadroSeleccionTipoCalculo1.getSelectedItem().equals("Cálculo de Liquidación")?true:false);
//        if(LiquidacionReliquidacion) System.out.println("Seleccionado Cálculo de Liquidación");
//        else System.out.println("Seleccionado Cálculo de Reliquidación");
//    } 
    

//    private void calcular() {
//        btnCalcularProrrAnual.setEnabled(false);
//        timer.start();
//        int numEtapasAno = Integer.parseInt(cuadroSeleccionNEtapas.getText());
//        int offset = Integer.parseInt(cuadroSeleccionOffset.getText());
//        int numSlack = Integer.parseInt(cuadroSeleccionSlack.getText());
//        int anoBase;
//        if (tipoCalcSeleccionado==0) {
//            anoBase=anoAEvaluar;
//        }
//        else {
//            anoBase=Integer.parseInt((String) cuadroAnoBase.getSelectedItem());
//        }
//        int numHidro=Integer.parseInt((String) cuadroSeleccionHidro.getSelectedItem());
//        boolean clientes = (ActClientes.isEnabled() && ActClientes.isSelected());
//        int nMesAEvaluar = Mes.getSelectedIndex();
//        PeajesConstant.HorizonteCalculo horizonte = PeajesConstant.HorizonteCalculo.Anual; //TEMP!!!!
////        Prorratas.Comenzar(nombreDirEnt,nombreDirSal,anoAEvaluar,tipoCalcSeleccionado,
////                anoBase,numHidro,numEtapasAno,numSlack,offset,clientes);
////        try {
//            Prorratas.calcular(horizonte, nombreDirEnt, nombreDirSal, anoAEvaluar, nMesAEvaluar, anoBase, numHidro, numEtapasAno, numSlack, offset, clientes);
////        } catch (IOException e) {
////            e.printStackTrace(System.out);
////        }
//        tInicio=System.currentTimeMillis();
//    }
 
    private void calcularProrratas () {
        
        File f_DirectorioEntrada = new File(getSelectedDirectorioEntrada());
        File f_DirectorioSalida = new File(getSelectedDirectorioSalida());
        int nAnoAEvaluar = getSelectedAnoAEvaluar();
        int nAnoBase = getSelectedAnoBase();
        int nHidro = getSelectedHidrologia();
        int numEtapasAno = Integer.parseInt(cuadroSeleccionNEtapas.getText());
        int nMesAEvaluar = getSelectedMes();
        int offset = Integer.parseInt(cuadroSeleccionOffset.getText());
        int numSlack = Integer.parseInt(cuadroSeleccionSlack.getText());
        boolean clientes = (ActClientes.isEnabled() && ActClientes.isSelected());
        PeajesConstant.HorizonteCalculo horizon = getSelectedHorizon();
        timer.start();
        tInicio=System.currentTimeMillis();
        if (continueToProrrata ()) {
            Prorratas.setPlexosAPIOption(bUsePlexosAPI);
            Prorratas.calcular(horizon, f_DirectorioEntrada, f_DirectorioSalida, nAnoAEvaluar, nMesAEvaluar, nAnoBase, nHidro, numEtapasAno, numSlack, offset, clientes);
        }
        
    }

    private void calcularPeajes() {
//        int anoBase;
//        if (tipoCalcSeleccionado==0) {
//            anoBase=anoAEvaluar;
//        }
//        else {
//            anoBase=Integer.parseInt((String) cuadroAnoBase.getSelectedItem());
//        }
        File f_DirectorioEntrada = new File(getSelectedDirectorioEntrada());
        File f_DirectorioSalida = new File(getSelectedDirectorioSalida());
        if (continueToPeajes ()) {
            Peajes.calculaPeajes(f_DirectorioEntrada, f_DirectorioSalida, getSelectedAnoAEvaluar());
        }
    }
    
    private void calcularPeajesIny() {
//        int anoBase;
//        if (tipoCalcSeleccionado==0) {
//            anoBase=anoAEvaluar;
//        }
//        else {
//            anoBase=Integer.parseInt((String) cuadroAnoBase.getSelectedItem());
//        }
//        seleccionTipoLiquidacion();
//        //System.out.println(LiquidacionReliquidacion);
//        PeajesIny.calculaPeajesIny(nombreDirEnt, nombreDirSal, anoAEvaluar, LiquidacionReliquidacion);
//        tInicio=System.currentTimeMillis();
        boolean bLiquidacionReliquidacion = cuadroSeleccionTipoCalculo.getSelectedIndex() == 0;
        File f_DirectorioEntrada = new File(getSelectedDirectorioEntrada());
        File f_DirectorioSalida = new File(getSelectedDirectorioSalida());
        int nMes = Mes.getSelectedIndex();
        PeajesConstant.HorizonteCalculo horizon = getSelectedHorizon();
        if (continueToPagosInyRet()) {
            PeajesIny.calculaPeajesIny(horizon, f_DirectorioEntrada, f_DirectorioSalida, getSelectedAnoAEvaluar(), nMes, bLiquidacionReliquidacion);
        }
    }
    
//    private void CalculaLiquiMesIny() {
//        int anoBase;
//        if (tipoCalcSeleccionado==0) {
//            anoBase=anoAEvaluar;
//        }
//        else {
//            anoBase=Integer.parseInt((String) cuadroAnoBase.getSelectedItem());
//        }
//        LiquidacionReliquidacion = true;
//        PeajesIny.calculaPeajesIny(nombreDirEnt, nombreDirSal, anoAEvaluar,LiquidacionReliquidacion);
//        mesAEvaluar = (String) Mes.getSelectedItem();
//        PeajesIny.LiquiMesIny(mesAEvaluar,anoAEvaluar);
//
//    }
    
    private void calcularPeajesRet() {
//        int anoBase;
//        if (tipoCalcSeleccionado==0) {
//            anoBase=anoAEvaluar;
//        }
//        else {
//            anoBase=Integer.parseInt((String) cuadroAnoBase.getSelectedItem());
//        }
//        seleccionTipoLiquidacion();
//        PeajesRet.calculaPeajesRet(nombreDirEnt, nombreDirSal,anoAEvaluar,LiquidacionReliquidacion);

        boolean bLiquidacionReliquidacion = cuadroSeleccionTipoCalculo.getSelectedIndex() == 0;
        File f_DirectorioEntrada = new File(getSelectedDirectorioEntrada());
        File f_DirectorioSalida = new File(getSelectedDirectorioSalida());
        int nMes = Mes.getSelectedIndex();
        PeajesConstant.HorizonteCalculo horizon = getSelectedHorizon();
        if (continueToPagosInyRet()) {
            PeajesRet.calculaPeajesRet(horizon, f_DirectorioEntrada, f_DirectorioSalida, getSelectedAnoAEvaluar(), nMes, bLiquidacionReliquidacion);
        }
    }
    
//    private void CalculaLiquiMesRet() {
//        int anoBase;
//        if (tipoCalcSeleccionado==0) {
//            anoBase=anoAEvaluar;
//        }
//        else {
//            anoBase=Integer.parseInt((String) cuadroAnoBase.getSelectedItem());
//        }
//        LiquidacionReliquidacion = true;
//        PeajesRet.calculaPeajesRet(nombreDirEnt, nombreDirSal, anoAEvaluar,LiquidacionReliquidacion);
//        mesAEvaluar = (String) Mes.getSelectedItem();
//        PeajesRet.LiquiMesRet(mesAEvaluar,anoBase);
//    }
//    private void EscribeLiquiMes() {
//        int anoBase;
//        if (tipoCalcSeleccionado==0) {
//            anoBase=anoAEvaluar;
//        }
//        else {
//            anoBase=Integer.parseInt((String) cuadroAnoBase.getSelectedItem());
//        }
//        mesAEvaluar = (String) Mes.getSelectedItem();
//        String fechaPag= (String) txtFechaPago.getText();
//       EscribeArchivosFinales.EscribeLiqMes(mesAEvaluar,anoAEvaluar,nombreDirSal,nombreDirEnt, fechaPag);
//       }
//    private void EscribeLiquiAno() {
//        int anoBase;
//        if (tipoCalcSeleccionado==0) {
//            anoBase=anoAEvaluar;
//        }
//        else {
//            anoBase=Integer.parseInt((String) cuadroAnoBase.getSelectedItem());
//        }
//        mesAEvaluar = (String) Mes.getSelectedItem();
//        EscribeArchivosFinales.EscribeLiqAno(mesAEvaluar,anoAEvaluar,nombreDirSal);
//
//    }
    
    private void escribeCuadroResumen() {
        
        File f_DirectorioEntrada = new File(getSelectedDirectorioEntrada());
        File f_DirectorioSalida = new File(getSelectedDirectorioSalida());
        String fechaPago = (String) txtFechaPago.getText();
        
        if (continueToCuadros()) {
            PeajesConstant.HorizonteCalculo horizon = getSelectedHorizon();
            if (horizon == PeajesConstant.HorizonteCalculo.Anual) {
                EscribeArchivosFinales.EscribeLiqAno(Mes.getSelectedItem().toString(), getSelectedAnoAEvaluar(), f_DirectorioSalida);
            } else {
                EscribeArchivosFinales.EscribeLiqMes(Mes.getSelectedItem().toString(), getSelectedAnoAEvaluar(), f_DirectorioSalida, f_DirectorioEntrada, fechaPago);
            }
        }
        
    }
    
    // <editor-fold defaultstate="collapsed" desc="VALIDACIONES">
    /**
     * Chequea que existan:
     * <li>Planilla Ent</li>
     * <li>Exista directorio de salida</li>
     *
     * @return true si aprueba todas las validaciones
     */
    private boolean continueToPeajes() {
        if (!existsEnt()) {
            JOptionPane.showMessageDialog(this, "No se encontró la planilla ENT para el año " + getSelectedAnoAEvaluar() + " en la ruta " + getSelectedDirectorioEntrada(), "Error de validación", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        File f_Salida = new File(getSelectedDirectorioSalida());
        if (!f_Salida.exists()) {
            JOptionPane.showMessageDialog(this, "No existe directorio de salida: " + getSelectedDirectorioSalida() + "\nDebe ingresar una ruta valida", "Error de validación", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }
    
    /** 
     * Chequea que existan:
     * <li>Planilla Ent del año correspondiente</li>
     * <li>Exista directorio de salida</li>
     * @param year
     * @return 
     */
    private boolean continueToPeajes(int year){
        if (!existsEnt()) {
            JOptionPane.showMessageDialog(this, "No se encontró la planilla ENT para el año " + year + " en la ruta " + getSelectedDirectorioEntrada(), "Error de validación", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        File f_Salida = new File(getSelectedDirectorioSalida());
        if (!f_Salida.exists()) {
            JOptionPane.showMessageDialog(this, "No existe directorio de salida: " + year + "\nDebe ingresar una ruta valida", "Error de validación", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }
    
    /**
     * Chequea que existan:
     * <li>Planilla Ent</li>
     * <li>Archivos plp: plpcen y plplin</li>
     * <li>Exista directorio de salida</li>
     * <li>Advierte que prorratas a Excel es demandante</li>
     *
     * @return true si aprueba todas las validaciones
     */
    private boolean continueToProrrata() {
        if (!existsEnt()) {
            JOptionPane.showMessageDialog(this, "No se encontró la planilla ENT para el año " + getSelectedAnoAEvaluar() + " en la ruta " + getSelectedDirectorioEntrada(), "Error de validación", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        String sProrrExcel = getOptionValue("Imprime prorratas a Excel", PeajesConstant.DataType.BOOLEAN);
        if (Boolean.parseBoolean(sProrrExcel)) {
            int yesno = JOptionPane.showConfirmDialog(this, "ADVERTENCIA: Escribir prorratas a Excel puede requerir excesivos recursos y tiempo computacional \n¿Está seguro desea continuar? Para modificar ir a File->Configuración", "Prorratas a Excel", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if (yesno == JOptionPane.NO_OPTION) {
                return false;
            }
        }
        String sPrintDebug = getOptionValue("Imprime archivos 'debug' prorratas", PeajesConstant.DataType.BOOLEAN);
        String sMaxThreads = PeajesCDEC.getOptionValue("Max Threads", PeajesConstant.DataType.INTEGER);
        if (Boolean.parseBoolean(sPrintDebug) && Integer.parseInt(sMaxThreads) > 1) {
            int yesno = JOptionPane.showConfirmDialog(this, "ADVERTENCIA: Ud. ha seleccionado escribir archivos debug prorratas con multi-thread."
                    + "\nEsto requiere intensivo uso de disco y puede entorpecer el progreso del cálculo paralelo."
                    + "\nSe recomienda desactivar cálculo paralelo (Max threads = 1) o cambiar Impresión archivos debug a 'false'"
                    + "\n¿Está seguro desea continuar? Para modificar ir a File->Configuración", "Archivos debug en paralelo", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if (yesno == JOptionPane.NO_OPTION) {
                return false;
            }
        }
        File f_plpcen = new File(getSelectedDirectorioEntrada() + SLASH + "plpcen.csv");
        if (!f_plpcen.exists()) {
            JOptionPane.showMessageDialog(this, "No se encontró archivo plpcen.csv en directorio " + getSelectedDirectorioEntrada() + "\nDebe copiar archivos plp al directorio", "Error de validación", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        File f_plplin = new File(getSelectedDirectorioEntrada() + SLASH + "plplin.csv");
        if (!f_plplin.exists()) {
            JOptionPane.showMessageDialog(this, "No se encontró archivo plplin.csv en directorio " + getSelectedDirectorioEntrada() + "\nDebe copiar archivos plp al directorio", "Error de validación", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        File f_Salida = new File(getSelectedDirectorioSalida());
        if (!f_Salida.exists()) {
            JOptionPane.showMessageDialog(this, "No existe directorio de salida: " + getSelectedDirectorioEntrada() + "\nDebe ingresar una ruta valida", "Error de validación", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }
    
    /**
     * Chequea que existan:
     * <li>Planilla Ent</li>
     * <li>Exista directorio de salida</li>
     * <li>Exista planilla Peaje directorio de salida</li>
     * <li>Exista archivo csv o planilla excel prorratas en directorio de salida</li>
     * 
     * @return true si aprueba todas las validaciones
     */
    private boolean continueToPagosInyRet () {
        
        //Chequeamos exista planillas ent, peajes, y prorratas
        if (!existsEnt()) {
            JOptionPane.showMessageDialog(this, "No se encontró la planilla ENT para el año " + getSelectedAnoAEvaluar() + " en la ruta " + getSelectedDirectorioEntrada(), "Error de validación", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        File f_Salida = new File(getSelectedDirectorioSalida());
        if (!f_Salida.exists()) {
            JOptionPane.showMessageDialog(this, "No existe directorio de salida: " + getSelectedDirectorioSalida() + "\nDebe ingresar una ruta valida", "Error de validación", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        int nAnoAEvaluar = getSelectedAnoAEvaluar();
        String sPeajesPath = getSelectedDirectorioSalida() + SLASH + "Peaje" + nAnoAEvaluar + ".xlsx";
        File f_Peajes = new File (sPeajesPath);
        if (!f_Peajes.exists()) {
            JOptionPane.showMessageDialog(this, "No se encontró la planilla 'Peaje" + nAnoAEvaluar + ".xlsx' en el directorio de salida: " + getSelectedDirectorioEntrada() + "\nEjecute el cálculo de Peajes antes de continuar", "Error de validación", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (!existsProrrata()) {
            JOptionPane.showMessageDialog(this, "No se encontraron datos de Prorratas en el directorio de salida: " + getSelectedDirectorioSalida() + "\nEjecute el cálculo de Prorratas antes de continuar", "Error de validación", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        String sPagosExcel = getOptionValue("Imprime pagos a Excel", PeajesConstant.DataType.BOOLEAN);
        if (Boolean.parseBoolean(sPagosExcel)) {
            int yesno = JOptionPane.showConfirmDialog(this, "ADVERTENCIA: Escribir pagos a Excel puede requerir excesivos recursos y tiempo computacional \n¿Está seguro desea continuar? Para modificar ir a File->Configuración", "Pagos a Excel", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if (yesno == JOptionPane.NO_OPTION) {
                return false;
            }
        }
        return true;
    }
    
    /**
     * Chequea que existan:
     * <li>Directorio de salida exista</li>
     * <li>algunos arreglos necesarios para realizar el resumen:
     * PeajesIny.PagoAnualEmpGO y PeajesRet.TotAnualPjeRetEmpO</li>
     *
     * @return true si aprueba todas las validaciones
     */
    private boolean continueToCuadros () {
        File f_Salida = new File(getSelectedDirectorioSalida());
        if (!f_Salida.exists()) {
            JOptionPane.showMessageDialog(this, "No existe directorio de salida: " + getSelectedDirectorioSalida() + "\nDebe ingresar una ruta valida", "Error de validación", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (PeajesIny.PagoAnualEmpGO == null) {
            JOptionPane.showMessageDialog(this, "Debe Ejecutar cálculo de pagos de inyección (botón Pagos Generación) antes de escribir cuadro resumen", "Error de validación", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (PeajesRet.TotAnualPjeRetEmpO == null) {
            JOptionPane.showMessageDialog(this, "Debe Ejecutar cálculo de pagos de retiro (botón Pagos Retiro) antes de escribir cuadro resumen", "Error de validación", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }
    
    private boolean existsEnt () {
        String sAnoAEvaluar = cuadroAnoAEvaluar.getSelectedItem().toString();
        String sDirectorioEnt = campoDirectorioEntrada.getText();
        String sEntPath = sDirectorioEnt + SLASH + "Ent" + sAnoAEvaluar + ".xlsx";
        File f_Ent = new File (sEntPath);
        return f_Ent.exists();
    }
    
    private boolean existsProrrata () {
        //Chequeamos que el archivo prorratas exista, dependiendo del horizonte:
        File f_ProrrGCSV;
        File f_ProrrCCSV;
        File f_ProrrExcel;
        int nAnoAEvaluar = getSelectedAnoAEvaluar();
        String sMesAEvaluar = Mes.getSelectedItem().toString();
        switch (getSelectedHorizon()){
            case Anual:
                f_ProrrGCSV = new File (getSelectedDirectorioSalida() + SLASH + PeajesConstant.PREFIJO_PRORRATAGEN + nAnoAEvaluar + ".csv");
                f_ProrrCCSV = new File (getSelectedDirectorioSalida() + SLASH + PeajesConstant.PREFIJO_PRORRATACONSUMO + nAnoAEvaluar + ".csv");
                break;
            case Mensual:
                f_ProrrGCSV = new File (getSelectedDirectorioSalida() + SLASH + PeajesConstant.PREFIJO_PRORRATAGEN + nAnoAEvaluar + sMesAEvaluar + ".csv");
                f_ProrrCCSV = new File (getSelectedDirectorioSalida() + SLASH + PeajesConstant.PREFIJO_PRORRATACONSUMO + nAnoAEvaluar + sMesAEvaluar + ".csv");
                break;
            default:
                f_ProrrGCSV = new File (getSelectedDirectorioSalida() + SLASH + PeajesConstant.PREFIJO_PRORRATAGEN + nAnoAEvaluar + ".csv");
                f_ProrrCCSV = new File (getSelectedDirectorioSalida() + SLASH + PeajesConstant.PREFIJO_PRORRATACONSUMO + nAnoAEvaluar + ".csv");
                break;
        }
        f_ProrrExcel = new File (getSelectedDirectorioSalida() + SLASH + "Prorrata" + nAnoAEvaluar + ".xlsx");
        return ((f_ProrrGCSV.exists() && f_ProrrCCSV.exists()) || f_ProrrExcel.exists());
    }
    
    // </editor-fold>
    
    private String getSelectedDirectorioEntrada () {
        return campoDirectorioEntrada.getText();
    }
    
    private String getSelectedDirectorioSalida () {
        return campoDirectorioSalida.getText();
    }
    
    private int getSelectedHidrologia () {
        String sHidro = cuadroSeleccionHidro.getSelectedItem().toString();
        return Integer.parseInt(sHidro);
    }
    
    private int getSelectedAnoAEvaluar () {
        String sAnoEvaluar = cuadroAnoAEvaluar.getSelectedItem().toString();
        return Integer.parseInt(sAnoEvaluar);
    }
    
    private int getSelectedAnoBase() {
        if (cuadroSeleccionAgnoBase.getSelectedIndex() == 0) {
            return getSelectedAnoAEvaluar();
        } else {
            String sAnoBase = cuadroAnoBase.getSelectedItem().toString();
            return Integer.parseInt(sAnoBase);
        }
    }
    
    private int getSelectedMes() {
        return Mes.getSelectedIndex();
    }
    
    private PeajesConstant.HorizonteCalculo getSelectedHorizon() {
        if (btnLiquidaAnual.isSelected()) {
            return PeajesConstant.HorizonteCalculo.Anual;
        } else {
            return PeajesConstant.HorizonteCalculo.Mensual;
        }
    }
    
    private void setActivaMes(boolean activa) {
        txtFechaPago.setEnabled(activa);
        lblMesLiquida.setEnabled(activa);
        lblFechaPago.setEnabled(activa);
        Mes.setEnabled(activa);
    }
            

    // <editor-fold defaultstate="collapsed" desc="Reliquidacion">
      //Calculo de Reliquidacion
    private File nombreDirEnt;
    private File nombreDirSal;
    private int anoAEvaluar;
    private String mesAEvaluar;
    private int tipoCalcSeleccionado;
    
    private void abrirDirectorioEntAccionRel() {
        String nombreOs = System.getProperty("os.name");
        File directorio0;
        final JFileChooser selectorDirEnt = new JFileChooser(".");
        if(nombreOs.equals("Windows XP")) {
            directorio0 = selectorDirEnt.getCurrentDirectory().getParentFile().getParentFile();
        }
        else {
            directorio0 = selectorDirEnt.getCurrentDirectory().getParentFile().getParentFile().getParentFile();
        }
        selectorDirEnt.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int resultado = selectorDirEnt.showOpenDialog(this);
        if(resultado==JFileChooser.CANCEL_OPTION) return;
        nombreDirLiq = selectorDirEnt.getSelectedFile();
        DirectorioLiquidacion.setText(nombreDirLiq.getPath());
    }

    private void abrirDirectorioSalAccionRel() {
        String nombreOs = System.getProperty("os.name");
        File directorio0;
        final JFileChooser selectorDirSal = new JFileChooser(".");
        if(nombreOs.equals("Windows XP")) {
            directorio0 = selectorDirSal.getCurrentDirectory().getParentFile().getParentFile();
        }
        else {
            directorio0 = selectorDirSal.getCurrentDirectory().getParentFile().getParentFile().getParentFile();
        }
        selectorDirSal.setCurrentDirectory(directorio0);
        selectorDirSal.setCurrentDirectory(new File(selectorDirSal.getCurrentDirectory()+File.separator+"DatosPeajes"+File.separator+cuadroAnoAEvaluar.getSelectedItem()));
        File directorio = selectorDirSal.getCurrentDirectory();
        if(directorio0.equals(directorio)) {
            JOptionPane.showMessageDialog(this,"Año a evaluar no ha sido creado.","Peajes Coordinador",JOptionPane.ERROR_MESSAGE);
        }
        selectorDirSal.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int resultado = selectorDirSal.showOpenDialog(this);
        if(resultado==JFileChooser.CANCEL_OPTION) return;
        nombreDirReliq = selectorDirSal.getSelectedFile();
        DirectorioReliquidacion.setText(nombreDirReliq.getPath());
    }

      private void calcularReliquidacion() {
        int anoBase;
        nombreDirEnt=nombreDirReliq;
        nombreDirSal=nombreDirReliq;
        if (tipoCalcSeleccionado==0) {
            anoBase=anoAEvaluar;
        }
        else {
            anoBase=Integer.parseInt((String) cuadroAnoBase.getSelectedItem());
        }
        LiquidacionReliquidacion = false;
        mesAEvaluar = (String) Mes1.getSelectedItem();
        System.out.println("Calculando Peajes con IT Real...");
        Peajes.calculaPeajes(nombreDirEnt, nombreDirSal, anoAEvaluar);
        System.out.println("Calculando Pagos de Inyección con IT Real...");
        PeajesIny.calculaPeajesIny(nombreDirEnt, nombreDirSal, anoAEvaluar,LiquidacionReliquidacion);
        PeajesIny.LiquiMesIny(mesAEvaluar,anoAEvaluar);
        System.out.println("Calculando Pagos de Retiro con IT Real...");
        PeajesRet.calculaPeajesRet(nombreDirEnt, nombreDirSal, anoAEvaluar,LiquidacionReliquidacion);
        System.out.println("Escribiendo Archivos mes con IT Real...");
        PeajesRet.LiquiMesRet(mesAEvaluar,anoBase);
        EscribeArchivosFinales.EscribeLiqMes(mesAEvaluar,anoAEvaluar,nombreDirSal,nombreDirEnt, "");
        System.out.println("");
        System.out.println("Ahora puede escribir los archivos de Reliquidación finales");
    }

 private void EscReliquidacion() {
        int anoBase;
        nombreDirEnt=nombreDirReliq;
        nombreDirSal=nombreDirReliq;
        String fechaPago= (String) FecPago.getText();
        if (tipoCalcSeleccionado==0) {
            anoBase=anoAEvaluar;
        }
        else {
            anoBase=Integer.parseInt((String) cuadroAnoBase.getSelectedItem());
        }
        mesAEvaluar = (String) Mes1.getSelectedItem();
        System.out.println("Escribiendo Archivos de Reliquidación con IT Real...");
        Reliquidacion.Reliquidacion(nombreDirLiq, nombreDirReliq, mesAEvaluar,anoAEvaluar,fechaPago);
        System.out.println("");
        System.out.println("Reliquidación "+mesAEvaluar+" finalizada");
    }
    //</editor-fold>
 
    private void salirPeajes() {
        //Delete all registered temp files:
        try {
            for (File f : lTempFiles) {
                if (f != null) {
                    f.delete();
                }
            }
            this.dispose();
        } finally {
            System.exit(0);
        }
    }
 
    private void leePropiedades() {
        propiedades = new Properties();
//        if (nombreDirEnt == null) {
//            abrirDirectorioEntAccion();
//        }
//        if (nombreDirEnt == null) {
//            return;
//        }
//        String DirBaseEntrada = nombreDirEnt.toString();
        String DirBaseEntrada = campoDirectorioEntrada.getText();
        if (DirBaseEntrada.isEmpty()) {
            abrirDirectorioEntAccion();
        }
        DirBaseEntrada = campoDirectorioEntrada.getText();
        String ArchivoConfiguracion = DirBaseEntrada + SLASH + "config.properties";
        System.out.println("Cargando archivo desde " + ArchivoConfiguracion);
        try {
            int nValues = Lee.leePropiedades(propiedades, ArchivoConfiguracion);
        } catch (FileNotFoundException e) {
            System.out.println(e.getMessage());
            System.out.println("Archivo de configuracion de caso no encontrado. Asegurese que el archivo se encuentra en la ruta de entrada y su nombre sea 'config.properties'");
            return;
        } catch (IOException e) {
            e.printStackTrace(System.out);
            return;
        }
        //cuadroSeleccionHidro.setSelectedIndex((anoAEvaluar-1962)-40+1);
        propiedades.list(System.out);
        txtFechaPago.setText(propiedades.getProperty("fecha_pago_liq"));
        FecPago.setText(propiedades.getProperty("fecha_pago_reliq"));
        cuadroSeleccionHidro.setSelectedItem(Integer.parseInt(propiedades.getProperty("num_hidro")));
        Mes.setSelectedItem(propiedades.getProperty("mes_evaluar_liq"));
        Mes1.setSelectedItem(propiedades.getProperty("mes_evaluar_rit"));
        cuadroSeleccionSlack.setText(propiedades.getProperty("num_barra_slack"));
        cuadroSeleccionOffset.setText(propiedades.getProperty("offset"));
        cuadroSeleccionNEtapas.setText(propiedades.getProperty("num_etapas_anno"));
        cuadroAnoAEvaluar.setSelectedItem(propiedades.getProperty("a_evaluar"));

        LiquidacionReliquidacion = Boolean.parseBoolean(propiedades.getProperty("liquidacionreliquidacion"));
        cuadroSeleccionTipoCalculo.setSelectedIndex(LiquidacionReliquidacion ? 0 : 1);
        nombreDirEnt = new File(propiedades.getProperty("dir_entrada"));
        campoDirectorioEntrada.setText(nombreDirEnt.getPath());
        nombreDirSal = new File(propiedades.getProperty("dir_salida"));
        campoDirectorioSalida.setText(nombreDirSal.getPath());

        tipoCalcSeleccionado = Integer.parseInt(propiedades.getProperty("tipo_calculo_seleccionado"));// propiedades.setProperty("tipo_calculo_seleccionado", Integer.toString(tipoCalcSeleccionado));

        cuadroSeleccionAgnoBase.setSelectedIndex(tipoCalcSeleccionado);
        if (tipoCalcSeleccionado == 0) {
            cuadroAnoBase.setEnabled(false);
        } else {
            cuadroAnoBase.setEnabled(true);
            cuadroAnoBase.setSelectedItem(propiedades.getProperty("a_base"));
        }

        ActClientes.setSelected(Boolean.parseBoolean(propiedades.getProperty("clientes")));
    }
 
 
    private void EscribrePropiedades(){
        propiedades = new Properties();
//        if (nombreDirEnt == null) {
//            abrirDirectorioEntAccion();
//        }
        String DirBaseEntrada = campoDirectorioEntrada.getText();
        if (DirBaseEntrada.isEmpty()) {
            abrirDirectorioEntAccion();
        }
        DirBaseEntrada = campoDirectorioEntrada.getText();
        File f_nombreDirEnt = new File (DirBaseEntrada);
        String ArchivoConfiguracion = DirBaseEntrada + SLASH +  "config.properties";
        System.out.println("Guardando archivo");
        
        String DirBaseSalida = campoDirectorioSalida.getText();
        File f_nombreDirSal = new File (DirBaseSalida);
        
        LiquidacionReliquidacion=(cuadroSeleccionTipoCalculo.getSelectedItem().equals("Cálculo de Liquidación"));
        
        int anoBase;
        if (tipoCalcSeleccionado == 0) {
            anoBase = anoAEvaluar;
        } else {
            anoBase = Integer.parseInt((String) cuadroAnoBase.getSelectedItem());
        }
        
        //guardo parametros en propiedades
        
        propiedades.setProperty("tipo_calculo_seleccionado", Integer.toString(tipoCalcSeleccionado));
        propiedades.setProperty("a_evaluar", (String) cuadroAnoAEvaluar.getSelectedItem());
        propiedades.setProperty("a_base", (String) String.valueOf(anoBase));
        propiedades.setProperty("mes_evaluar_rit", (String) Mes1.getSelectedItem());
        propiedades.setProperty("dir_entrada", f_nombreDirEnt.toString());
        propiedades.setProperty("dir_salida", f_nombreDirSal.toString());
        propiedades.setProperty("liquidacionreliquidacion", String.valueOf(LiquidacionReliquidacion));
        propiedades.setProperty("num_etapas_anno", cuadroSeleccionNEtapas.getText());
        propiedades.setProperty("offset", cuadroSeleccionOffset.getText());
        propiedades.setProperty("num_barra_slack",cuadroSeleccionSlack.getText());
        propiedades.setProperty("num_hidro",String.valueOf (cuadroSeleccionHidro.getSelectedItem()));
        propiedades.setProperty("clientes",String.valueOf (ActClientes.getInheritsPopupMenu()));
        propiedades.setProperty("mes_evaluar_liq", (String) Mes.getSelectedItem());
        propiedades.setProperty("dir_liqmes",nombreDirLiq == null?"":nombreDirLiq.toString());
        propiedades.setProperty("dir_salida_reliq",nombreDirReliq == null?"":nombreDirReliq.toString());
        propiedades.setProperty("fecha_pago_liq",(String) txtFechaPago.getText());
        propiedades.setProperty("fecha_pago_reliq",(String) FecPago.getText());
        //escribo parametros
        
        Escribe.EscribePropiedades(propiedades,ArchivoConfiguracion);

    }
    
    private void reLoadOptions() {
        if (config == null) {
            initOptionFile();
        }
        
        //Seleccion de periodos:
        String[] agnos;
        String sMinEvalua = getOptionValue("Min Evalua", PeajesConstant.DataType.INTEGER);
        String sMaxEvalua = getOptionValue("Max Evalua", PeajesConstant.DataType.INTEGER);
        int nMinEvalua = Integer.parseInt(sMinEvalua);
        int nMaxEvalua = Integer.parseInt(sMaxEvalua);
        if (nMinEvalua >= nMaxEvalua) {
            agnos = new String[1];
            agnos[0] = sMinEvalua;
        } else {
            agnos = new String[nMaxEvalua - nMinEvalua + 1];
            for (int a = nMinEvalua; a <= nMaxEvalua; a++) {
                agnos[a - nMinEvalua] = String.valueOf(a);
            }
        }
        String sAgnoAEvaluar = cuadroAnoAEvaluar.getSelectedItem().toString();
        cuadroAnoAEvaluar.setModel(new javax.swing.DefaultComboBoxModel(agnos));
        cuadroAnoAEvaluar.setSelectedItem(sAgnoAEvaluar);
        String sAgnoBase = cuadroAnoBase.getSelectedItem().toString();
        cuadroAnoBase.setModel(new javax.swing.DefaultComboBoxModel(agnos));
        cuadroAnoBase.setSelectedItem(sAgnoBase);
        
        //Hidrologias:
        String[] hydros;
        String sMinHydro = getOptionValue("Min Hidrologias", PeajesConstant.DataType.INTEGER);
        String sMaxHydro = getOptionValue("Max Hidrologias", PeajesConstant.DataType.INTEGER);
        int nMinHydro = Integer.parseInt(sMinHydro);
        int nMaxHydro = Integer.parseInt(sMaxHydro);
        if (nMinHydro >= nMaxHydro) {
            hydros = new String[1];
            hydros[0] = sMinHydro;
        } else {
            hydros = new String[nMaxHydro - nMinHydro + 1];
            for (int h = nMinHydro; h <= nMaxHydro; h++) {
                hydros[h - nMinHydro] = String.valueOf(h);
            }
        }
        String sHydro = cuadroSeleccionHidro.getSelectedItem().toString();
        cuadroSeleccionHidro.setModel(new javax.swing.DefaultComboBoxModel(hydros));
        cuadroSeleccionHidro.setSelectedItem(sHydro);
        
        //Actualiza clientes:
        String sActClientes = getOptionValue("Actualiza Clientes", PeajesConstant.DataType.BOOLEAN);
        ActClientes.setEnabled(Boolean.parseBoolean(sActClientes));
        
        //Reglas de calculo de peajes:
        String sCuadroSeleccionTipoCalculo1 = getOptionValue("Reglas Reliquidacion", PeajesConstant.DataType.BOOLEAN);
        if (Boolean.parseBoolean(sCuadroSeleccionTipoCalculo1)) {
            cuadroSeleccionTipoCalculo.setEnabled(true);
        } else {
            cuadroSeleccionTipoCalculo.setSelectedItem(0);
            cuadroSeleccionTipoCalculo.setEnabled(false);
        }
        
        //Muestra panel de reliquidacion:
        String sShowReliq = getOptionValue("Muestra menu re-liquidacion", PeajesConstant.DataType.BOOLEAN);
        boolean bShowReliq = Boolean.parseBoolean(sShowReliq);
        pnlReliquidacion.setVisible(bShowReliq);
        
        //Ventana de mensajes
        String sShowMensajes = getOptionValue("Mostrar mensajes", PeajesConstant.DataType.BOOLEAN);
        bShowMensajes = Boolean.parseBoolean(sShowMensajes);
        if(bShowMensajes){
            customPrintStream = new PrintStream(new CustomOutputStream(this.txtAreaPrintMensajes));
        }
        //API de PLEXOS
        String sUsarAPIPlexos = getOptionValue("Utilizar API de PLEXOS", PeajesConstant.DataType.BOOLEAN);
        bUsePlexosAPI = Boolean.parseBoolean(sUsarAPIPlexos);
        
        pack();
        this.validate();
    }
    
    private void initOptionFile() {
        try {
            File f_user = getUserOptionFile();
            Properties pDefault = new Properties();
            java.io.InputStream in_default = getClass().getResourceAsStream("/cl/coordinador/peajes/resources/" + ARCHIVO_CONFIG); //resources deben cargarse desde un stream
            assert (in_default != null) : "Cambiaron de ubicacion del archivo de configuracion o renombraron los packages?";
            pDefault.loadFromXML(in_default);
            if (!f_user.exists()) {
                config = pDefault;
            } else {
                Properties pUser = loadOptionFile(f_user);
                String versionUser = pUser.getProperty("Version");
                if (versionUser == null) {
                    config = pDefault;
                } else {
                    if (!versionUser.equalsIgnoreCase(pDefault.getProperty("Version"))) {
                        config = pDefault;
                    } else {
                        config = pUser;
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace(System.out); //TODO: better message to user
        }
    }
    
    private void showOptionWindow() {
        if (config == null) {
            initOptionFile();
        }
        PeajesConfigGUI guiOption = new PeajesConfigGUI(this, config);
        guiOption.setLocationRelativeTo(this);
        guiOption.setVisible(true);
        
        if (guiOption.hasSavedChanges()) {
            reLoadOptions(); //Asume que espera que se cierre la ventana para continuar
        }
    }
    
    private static java.io.File getUserOptionFile () {
        String os_name = System.getProperty("os.name");
        String folderPath;
        if (os_name.toLowerCase().startsWith("windows")) {
            String appPath = System.getenv("APPDATA");
            if (appPath != null) {
                folderPath = appPath + File.separator + "coordinador";
            } else {
                folderPath = System.getProperty("user.home") + File.separator + "coordinador";
            }
        } else if (os_name.toLowerCase().startsWith("linux")) {
            folderPath = System.getProperty("user.home") + File.separator + ".coordinador";
        } else {
            folderPath = System.getProperty("user.home") + File.separator + ".coordinador"; //TODO: May be implement for other OS
        }
        String fileConfig = folderPath + File.separator + ARCHIVO_CONFIG;
        File f_fileConfig = new File (fileConfig);
        return f_fileConfig;
    }
    
    /**
     * Carga archivo de propiedades del Peajator
     *
     * @param f_propiedades archivo propiedades xml
     * @return instancia properties
     * @throws java.io.FileNotFoundException si el archivo no existe
     * @throws java.io.IOException si hay problema de acceso al archivo
     */
    public static java.util.Properties loadOptionFile(java.io.File f_propiedades) throws java.io.FileNotFoundException, java.io.IOException {
        java.io.FileInputStream in = new java.io.FileInputStream(f_propiedades);
        java.util.Properties f_properties = new java.util.Properties();
        f_properties.loadFromXML(in);
        return f_properties;
    }

    /**
     * Guarda a archivo (xml) del argumento las propiedades Peajator
     *
     * @param propiedades instancia properties
     * @throws java.io.FileNotFoundException si el archivo no existe
     * @throws java.io.IOException si hay problema de acceso al archivo
     */
    public static void saveOptionFile(java.util.Properties propiedades) throws java.io.FileNotFoundException, java.io.IOException {
        config = propiedades;
        java.io.File f_config = getUserOptionFile(); //Siempre grabamos a la caperta del user. Nunca al resource
        if (!f_config.getParentFile().exists()) {
            f_config.getParentFile().mkdir();
        }
        java.io.FileOutputStream out = new java.io.FileOutputStream(f_config);
        config.storeToXML(out, "---PEAJATOR CONFIG FILE---");
        out.close();
    }
    
    /**
     * Devuelve el valor del parametro seleccionado
     *
     * @param key valor completo de la llave. no usar null
     * @param type tipo de valor (opcional - usar null para busqueda simple)
     * @return valor correspondiente a la llava o null si no se encuentra la
     * llave
     */
    public static String getOptionValue(String key, PeajesConstant.DataType type) {
        String value = config.getProperty(key);
        if (value == null) {
            if (type != null) {
                value = config.getProperty(key + PeajesConstant.KEY_SEPARATOR + type.name());
            }
            if (value == null) {
                for (String s : config.stringPropertyNames()) {
                    if (s.toLowerCase().startsWith(key.toLowerCase())) {
                        value = s;
                        break;
                    }
                }
            }
        }
        return value;
    }
    
    private static final java.util.List<File> lTempFiles = new java.util.LinkedList<File>();
    /**
     * Crea un nuevo archivo temporal (contralado por la VM Java)
     * <br>Se supone la VM limpia estos temporales (no creo que sirva)
     *
     * @param prefix prefijo opcional
     * @param suffix sufijo opcional (incluir 'punto' para agregar extension).
     * Eg. '.bin'
     * @return instancia del archivo temporal creado
     * @throws IOException si no se pudo crear el archivo temporal
     */
    public static File createTempFile(String prefix, String suffix) throws IOException {
        File temp = File.createTempFile(prefix, suffix);
        if (temp != null) {
            temp.deleteOnExit();
            if (!(temp.delete())) {
                throw new IOException("Could not delete temp file: " + temp.getAbsolutePath());
            }

            lTempFiles.add(temp);
        }
        return temp;
    }

    class TimerListener implements ActionListener {
        int porcentaje=0;
        int deltat=0;
        int horas=0;
        int minutos=0;
        int segundos=0;
        int maximum=100;
        public void actionPerformed(ActionEvent evt) {
            long tActual = System.currentTimeMillis();
            deltat=(int)Math.round((tActual-tInicio)/1000.0);
            tiempo.setTime(deltat);
            minutos=(int)Math.floor(deltat/60.0);
            segundos=(minutos==0?deltat:(int)Math.floor(deltat%(60*minutos)));
            etiquetaTiempo.setText(minutos+":"+(segundos<10?"0"+segundos:segundos)+" min:seg");

            if(Prorratas.cargando()==true){
            	textoCalculo.setText("Cargando Archivos de Entrada");
            	progreso.setStringPainted(false);
            	progreso.setIndeterminate(true);
            }
            else if(Prorratas.calculaFlujos()==true){
            	textoCalculo.setText("Calculando Flujos de Potencia y Prorratas por etapa");
            	progreso.setStringPainted(true);
            	progreso.setIndeterminate(false);
            	porcentaje=(int)(Prorratas.obtenerProgreso()*100);
            	progreso.setValue(porcentaje);
            }
            else if(Prorratas.calculaProrratas()==true){
            	textoCalculo.setText("Calculando Prorratas anuales");
            	progreso.setStringPainted(false);
            	progreso.setIndeterminate(true);
            }
            else if(Prorratas.guardando()==true){
            	textoCalculo.setText("Guardando Archivos de Resultados");
            	progreso.setStringPainted(false);
            	progreso.setIndeterminate(true);
            }
            else if (Prorratas.terminado()==true) {
                textoCalculo.setText("Terminado");
                Toolkit.getDefaultToolkit().beep();
                timer.stop();
                btnCalcularProrrAnual.setEnabled(true);
                progreso.setIndeterminate(false);
                progreso.setValue(maximum);
            }
            else if(PeajesIny.cargando()==true){
            	textoCalculo.setText("Cargando Archivos de Entrada");
            	progreso.setStringPainted(false);
            	progreso.setIndeterminate(true);
            }
            else if(PeajesIny.calculando()==true){
            	textoCalculo.setText("Calculando Pagos de Inyeccion");
            	progreso.setStringPainted(false);
            	progreso.setIndeterminate(true);
            }
            else if(PeajesIny.escribiendo()==true){
            	textoCalculo.setText("Escribiendo Pagos de Inyeccion");
            	progreso.setStringPainted(false);
            	progreso.setIndeterminate(true);
            }

        }
    }
    
    private void setCustomPrint(){
        System.setOut(customPrintStream);
        System.setErr(customPrintStream);
    }
    
    private void restorePrint(){
        System.setOut(standardOut);
        System.setErr(standardErr);
    }


    /**
    * This class extends from OutputStream to redirect output to a JTextArrea
    *
    */
    public class CustomOutputStream extends OutputStream {

        private JTextArea textArea;

        public CustomOutputStream(JTextArea textArea) {
            this.textArea = textArea;
        }

        @Override
        public void write(int b) throws IOException {
            // redirects data to the text area
            textArea.append(String.valueOf((char) b));
            // scrolls the text area to the end of data
            textArea.setCaretPosition(textArea.getDocument().getLength());
        }
    }

}
